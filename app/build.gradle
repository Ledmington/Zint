plugins {
	id 'application'
	id 'java'
	id 'java-library'
	id 'pmd'
	id 'com.adarshr.test-logger' version '3.2.0'
	id 'com.diffplug.spotless' version '7.0.4'
	id 'com.github.ben-manes.versions' version '0.46.0'
	id 'de.undercouch.download' version '5.3.1'
}

static def path(String... args) {
	return String.join(File.separator, args)
}

group 'com.ledmington.zint'
String version = '0.1.0'
String appDescription = 'ZOMBIE interpreter'
String author = 'Filippo Barbari'
String authorMail = 'filippo.barbari@gmail.com'
String appName = 'Zint'
String appNameLowerCase = 'zint'
String mainClassName = "${group}.Zint"

String fatJarBaseName = "${appNameLowerCase}-${version}"
String fatJarName = "${fatJarBaseName}.jar"
String fatJarPath = path("${project.layout.buildDirectory.get().toString()}", "libs", "${fatJarName}")

ext.palantirVersion = '2.70.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// testing stuff
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << '-Xlint:all'
	options.compilerArgs << '-Xdiags:verbose'
	options.compilerArgs << '-Werror'
	options.deprecation = true
	options.encoding = 'UTF-8'
}

application {
	mainClass = mainClassName
}

test {
	useJUnitPlatform()
	// failFast true
}

// task runOnConsole(type: JavaExec) {
// 	group = "run"
// 	standardInput = System.in
// 	classpath = project.sourceSets.main.runtimeClasspath
// 	mainClass "${mainClassName}"
// }

pmd {
	ignoreFailures = true
}

testlogger {
	theme = 'standard-parallel'

	showExceptions = true
	showStackTraces = true
	showFullStackTraces = false
	showCauses = true

	slowThreshold = 2000

	showSummary = true
	showSimpleNames = false
	showPassed = true
	showSkipped = true
	showFailed = true
	showOnlySlow = false

	showStandardStreams = false
	showPassedStandardStreams = true
	showSkippedStandardStreams = true
	showFailedStandardStreams = true

	logLevel = 'lifecycle'
}

spotless {
	format 'misc', {
		target '*.md', '.gitignore', '.gitattributes'
		trimTrailingWhitespace()
		leadingSpacesToTabs()
		endWithNewline()
		setEncoding('utf-8')
	}

	java {
		target fileTree('.') {
			include path('app', '**', '*.java')
			exclude path('**', 'build', '**'), path('**', 'build-*', '**'), path('**', 'bin', '**')
		}
		setEncoding('utf-8')
		removeUnusedImports()
		palantirJavaFormat("${palantirVersion}").formatJavadoc(true)
		leadingSpacesToTabs()
		formatAnnotations()
		trimTrailingWhitespace()
		endWithNewline()

		// check https://javadoc.io/doc/com.diffplug.spotless/spotless-plugin-gradle/latest/com/diffplug/gradle/spotless/JavaExtension.html
		importOrder('java', 'javax', 'javafx', 'org.junit', 'org.openjdk', 'com', 'com.ledmington', 'org', group as String)

		licenseHeader String.join("\n",
				"/*",
				" * ${appName} - ${appDescription}",
				" * Copyright (C) 2022-${new Date().format('yyyy')} ${author} <${authorMail}>",
				" *",
				" * This program is free software: you can redistribute it and/or modify",
				" * it under the terms of the GNU General Public License as published by",
				" * the Free Software Foundation, either version 3 of the License, or",
				" * (at your option) any later version.",
				" *",
				" * This program is distributed in the hope that it will be useful,",
				" * but WITHOUT ANY WARRANTY; without even the implied warranty of",
				" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
				" * GNU General Public License for more details.",
				" *",
				" * You should have received a copy of the GNU General Public License",
				" * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
				" */",
		)
	}
}

tasks.compileJava.dependsOn(spotlessApply)

tasks.register('fatJar', Jar) {
	group = 'distribution'
	description = 'Builds the fat jar of the application'
	from sourceSets.main.output
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
	manifest {
		archiveBaseName = appNameLowerCase
		attributes(
				"Implementation-Version": "${version}",
				"Main-Class": "$mainClassName"
		)
	}
	archiveBaseName = "${fatJarBaseName}"

	doLast {
		printf "The fat jar is %s\n", fatJarPath
		printf "Fat jar size: %.3f MB\n", new File(fatJarPath).length() / 1_000_000L
	}
}

tasks.build.dependsOn(fatJar)

tasks.register('downloadParserGenerator', Download) {
	group = 'utilities'
	description = 'Downloads the Parser Generator from GitHub'
	src "https://github.com/Ledmington/parser_generator/releases/download/snapshot-2025-08-13-912ee2d/parser-gen-cli-0.1.0.jar"
	dest new File(project.layout.buildDirectory.get().toString(), "parser-generator.jar")
	overwrite false
	acceptAnyCertificate false
}

tasks.register('generateZombieParser', JavaExec) {
	dependsOn downloadParserGenerator
	group = 'utilities'
	description = 'Generates the parser of the ZOMBIE language'
	classpath downloadParserGenerator.dest
	args = [
			"-g", path(project.layout.projectDirectory.toString(), "src", "main", "resources", "zombie.g"),
			"-o", path(project.layout.projectDirectory.toString(), "src", "main", "java", "com", "ledmington", "zint", "gen", "ZombieParser.java"),
			"-p", "com.ledmington.zint.gen",
			"--overwrite",
			// "--verbose"
	]
}
