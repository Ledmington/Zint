plugins {
	id 'application'
	id 'java'
	id 'java-library'
	id 'pmd'
	id 'com.adarshr.test-logger' version '3.2.0'
	id 'com.diffplug.spotless' version '7.0.4'
	id 'com.github.ben-manes.versions' version '0.46.0'
	id 'de.undercouch.download' version '5.3.1'
}

static def path(String... args) {
	return String.join(File.separator, args)
}

group 'com.ledmington.zint'
version '0.1.0'
String appDescription = 'ZOMBIE interpreter'
String author = 'Filippo Barbari'
String authorMail = 'filippo.barbari@gmail.com'
String appName = 'Zint'
String appNameLowercase = 'zint'
String mainClassName = "${group}.Zint"

ext.palantirVersion = '2.70.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// testing stuff
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << '-Xlint:all'
	options.compilerArgs << '-Xdiags:verbose'
	options.compilerArgs << '-Werror'
	options.deprecation = true
	options.encoding = 'UTF-8'
}

application {
	mainClass = mainClassName
}

test {
	useJUnitPlatform()
	// failFast true
}

// task runOnConsole(type: JavaExec) {
// 	group = "run"
// 	standardInput = System.in
// 	classpath = project.sourceSets.main.runtimeClasspath
// 	mainClass "${mainClassName}"
// }

pmd {
	ignoreFailures = true
}

testlogger {
	theme 'standard-parallel'

	showExceptions true
	showStackTraces true
	showFullStackTraces false
	showCauses true

	slowThreshold 2000

	showSummary true
	showSimpleNames false
	showPassed true
	showSkipped true
	showFailed true
	showOnlySlow false

	showStandardStreams false
	showPassedStandardStreams true
	showSkippedStandardStreams true
	showFailedStandardStreams true

	logLevel 'lifecycle'
}

spotless {
	format 'misc', {
		target '*.md', '.gitignore', '.gitattributes'
		trimTrailingWhitespace()
		leadingSpacesToTabs()
		endWithNewline()
		setEncoding('utf-8')
	}

	java {
		target fileTree('.') {
			include path('app', '**', '*.java')
			exclude path('**', 'build', '**'), path('**', 'build-*', '**'), path('**', 'bin', '**')
		}
		setEncoding('utf-8')
		removeUnusedImports()
		palantirJavaFormat("${palantirVersion}").formatJavadoc(true)
		leadingSpacesToTabs()
		formatAnnotations()
		trimTrailingWhitespace()
		endWithNewline()

		// check https://javadoc.io/doc/com.diffplug.spotless/spotless-plugin-gradle/latest/com/diffplug/gradle/spotless/JavaExtension.html
		importOrder('java', 'javax', 'javafx', 'org.junit', 'org.openjdk', 'com', 'com.ledmington', 'org', group as String)

		licenseHeader String.join("\n",
				"/*",
				" * ${appName} - ${appDescription}",
				" * Copyright (C) 2025-${new Date().format('yyyy')} ${author} <${authorMail}>",
				" *",
				" * This program is free software: you can redistribute it and/or modify",
				" * it under the terms of the GNU General Public License as published by",
				" * the Free Software Foundation, either version 3 of the License, or",
				" * (at your option) any later version.",
				" *",
				" * This program is distributed in the hope that it will be useful,",
				" * but WITHOUT ANY WARRANTY; without even the implied warranty of",
				" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
				" * GNU General Public License for more details.",
				" *",
				" * You should have received a copy of the GNU General Public License",
				" * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
				" */",
		)
	}
}

String fatJarName = "${buildDir}/libs/${appNameLowercase}-${version}.jar"
tasks.register('buildFatJar', Jar) {
	group 'distribution'
	description 'Builds the fat jar of the application'
	from sourceSets.main.output
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
	manifest {
		archiveBaseName = appNameLowercase
		attributes(
				//"Implementation-Title": "Gradle",
				"Implementation-Version": version,
				"Main-Class": "$mainClassName"
		)
	}

	doLast {
		println "The fat jar is ${fatJarName}"
		println String.format("Fat jar size: %.3f MB", new File(fatJarName).length() / 1_000_000)
	}
}

tasks.compileJava.dependsOn(spotlessApply)
